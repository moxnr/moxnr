// src/mdx-plugins/remark-headings.ts
import Slugger from "github-slugger";
import { visit } from "unist-util-visit";
var getFlattenedValue = (node) => node.children.map(
  (child) => "children" in child ? getFlattenedValue(child) : "value" in child ? child.value : ""
).join("");
var remarkHeadings = function() {
  const { headingMeta } = this.data();
  const slugger = new Slugger();
  return (tree, _file, done) => {
    visit(
      tree,
      [
        // Match headings and <details>
        { type: "heading" },
        { name: "summary" },
        { name: "details" }
      ],
      (node) => {
        var _a;
        if (node.type === "heading") {
          const hasJsxInH1 = node.depth === 1 && Array.isArray(node.children) && node.children.some(
            (child) => child.type === "mdxJsxTextElement"
          );
          const value = getFlattenedValue(node);
          node.data || (node.data = {});
          const headingProps = (_a = node.data).hProperties || (_a.hProperties = {});
          const id = slugger.slug(headingProps.id || value);
          headingProps.id = id;
          const heading = {
            depth: node.depth,
            value,
            id
          };
          headingMeta.headings.push(heading);
          if (hasJsxInH1) {
            headingMeta.hasJsxInH1 = true;
          }
          return;
        }
        if (node.data) {
          delete node.data._mdxExplicitJsx;
        }
      }
    );
    done();
  };
};
export {
  remarkHeadings
};
